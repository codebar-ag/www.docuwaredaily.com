name: production | assets & deploy

on:
  push:
    branches:
      - production

jobs:
  assets:
    runs-on: ${{ matrix.os }}
    name: production-assets | ci

    strategy:
      fail-fast: false
      matrix:
        os: [ ubuntu-latest ]
        php: [ 8.2 ]
        node: [ 16 ]

    steps:
      - name: set timezone
        uses: szenius/set-timezone@v1.2
        with:
          timezoneLinux: "Europe/Zurich"

      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: '0'

      - name: Setup node env üèó
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node }}

      - name: Setup php env
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ matrix.php }}
          extensions: dom, curl, fileinfo, mysql, libxml, mbstring, zip, pcntl, pdo, sqlite, pdo_sqlite, bcmath, soap, intl, gd, exif, iconv, imagick

      - name: Prepare the environment
        run: cp .env.ci .env

      - name: Prepare the vite.config.js file
        run: cp vite.config-example.js vite.config.js

      # Backend dependencies
      - name: Apply Nova license
        run: composer config http-basic.nova.laravel.com ${{ secrets.NOVA_USERNAME }} ${{ secrets.NOVA_LICENSE_KEY }}

      - name: Apply Media Library license
        run: composer config http-basic.satis.spatie.be ${{ secrets.SPATIE_USERNAME }} ${{ secrets.SPATIE_MEDIA_LIBRARY_PRO_LICENSE_KEY }}

      - name: Get composer cache directory
        id: composer-cache
        run: echo "::set-output name=dir::$(composer config cache-files-dir)"

      - name: Cache composer dependencies
        uses: actions/cache@v3
        with:
          path: ${{ steps.composer-cache.outputs.dir }}
          key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.json') }}
          restore-keys: ${{ runner.os }}-composer-

      - name: Install Composer dependencies
        run: composer install -q --no-progress --prefer-dist --no-interaction --no-suggest --optimize-autoloader --no-scripts

      # Frontend dependencies
      - name: Set NPM token
        run: npm config set "//npm.fontawesome.com/:_authToken" ${{ secrets.FONTAWESOME_NPM_AUTH_TOKEN }}

      - name: Get npm cache directory
        id: npm-cache-dir
        run: |
          echo "::set-output name=dir::$(npm config get cache)"

      - name: Cache node_modules üì¶
        uses: actions/cache@v3
        id: npm-cache
        with:
          path: ${{ steps.npm-cache-dir.outputs.dir }}
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Install dependencies üë®üèª‚Äçüíª
        run: npm install --frozen-lockfile

      - name: Publish Laravel assets
        run: php artisan vendor:publish --tag=laravel-assets --ansi --force
      - name: Publish Laravel Nova assets
        run: php artisan vendor:publish --tag=nova-assets --ansi --force
      - name: Auth assets
        run: php artisan vendor:publish --tag=auth-assets --ansi --force
      - name: Clear Cache
        run: php artisan view:clear

      - name: Set output
        id: vars
        run: echo ::set-output name=short_ref::${GITHUB_REF#refs/*/}

      - name: publish production assets
        env:
          APP_ENV: ${{ steps.vars.outputs.short_ref }}
          AWS_ENDPOINT: ${{ secrets.AWS_PRODUCTION_ENDPOINT }}
          AWS_URL: ${{ secrets.AWS_PRODUCTION_URL }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_PRODUCTION_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_PRODUCTION_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: ${{ secrets.AWS_PRODUCTION_DEFAULT_REGION }}
          AWS_BUCKET: ${{ secrets.AWS_PRODUCTION_BUCKET }}
        run: php artisan lasso:publish --no-git

  deploy_zunscan:
    needs: assets
    runs-on: ubuntu-latest
    name: production | deploy zunscan
    steps:
      - uses: actions/checkout@master
        with:
          fetch-depth: '0'
      - name: Deploy to production
        env:
          ENVOYER_HOOK_PRODUCTION: ${{ secrets.ENVOYER_HOOK_PRODUCTION }}
        run: curl "$ENVOYER_HOOK_PRODUCTION"?sha=${{ github.sha }}